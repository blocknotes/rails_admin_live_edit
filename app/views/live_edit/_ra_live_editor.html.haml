:ruby
  ra_le_model = false
  if defined?( current_user ) && current_user && action_name == 'show' && params[:id]
    ra_le_model = controller_name.singularize
    ra_le_id = params[:id]
  end

- if ra_le_model && ra_le_id
  :css
    .ra-le-button {
      background: #ddd;
      color: #004;
      display: inline-block;
      padding: 5px 10px;
      text-decoration: none;
    }
    .ra-le-button.btn1 {
      border-top: 1px solid #aaa;
      border-left: 1px solid #aaa;
      border-radius: 5px 0 0 0;
    }
    .ra-le-button.btn2 {
      border-top: 1px solid #aaa;
      border-left: 1px solid #aaa;
      border-right: 1px solid #aaa;
      border-radius: 0 5px 0 0;
    }
    .ra-le-controls {
      background: rgba(0, 0, 0, .2);
      bottom: 0;
      left: 0;
      padding-top: 5px;
      position: fixed;
      text-align: right;
      width: 100%;
    }
    .ra-le-controls > a:last-child {
      margin-right: 5px;
    }
    .ra-le-controls > a:hover {
      background: #eee;
      color: #000;
    }
    #ra-le-modal {
      display: none;
      background: rgba(0, 0, 0, .30);
      z-index: 999;
      padding: 30px 0;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      overflow-x: hidden;
      overflow-y: auto;
    }
    #ra-le-modal > .modal-dialog {
      position: relative;
      margin: 30px auto;
      width: 940px;
      -webkit-box-shadow: 0 3px 9px rgba(0, 0, 0, .5);
      box-shadow: 0 3px 9px rgba(0, 0, 0, .5);
      background: #fff;
      margin: 0 auto;
    }
    #ra-le-modal .dlg-buttons {
      background: #ccc;
      text-align: right;
      padding: 0 4px;
    }
    #ra-le-modal .dlg-buttons > a {
      border: 1px solid #888;
      color: #888;
      text-decoration: none;
    }
    #ra-le-modal .dlg-buttons > a:hover {
      background: #eee;
      color: #004;
    }
    #ra-le-modal .modal-footer > .dlg-buttons {
      text-align: center;
    }
    #ra-le-content {
      background: #ccc;
      color: #222;
      font-style: italic;
      padding-top: 4px;
      text-align: center;
    }
    #ra-le-content > iframe {
      border: 1px solid #888;
    }

  #ra-le-modal
    .modal-dialog
      .dlg-buttons
        %a.btn-close.ra-le-button{ href: '#', onclick: 'event.preventDefault();modal.close();' }== &times;
      #ra-le-content = t 'live_edit.loading'
      .modal-footer
        .dlg-buttons
          %a.btn-close.ra-le-button{ href: '#', onclick: 'event.preventDefault();modal.close();' }= t 'live_edit.button.close'

  .ra-le-controls
    %a.btn1.ra-le-button#ra-le-open-modal{ href: '#' }>= t 'live_edit.button.edit_page'
    = link_to t('live_edit.button.admin'), rails_admin_path, class: 'btn2 ra-le-button'

  :javascript
    // >>> rmodal.js >>>
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
        typeof define === 'function' && define.amd ? define(factory) :
        (global.RModal = factory());
    }(this, (function () {
    var is = function (obj, type) { return Object.prototype.toString.call(obj).toLowerCase() === ("[object " + type + "]"); };
    var addClass = function (el, cls) {
        var arr = el.className
        .split(/\s+/)
        .filter(function (c) { return !!c && c == cls; });
        if (!arr.length) {
            el.className += " " + cls;
        }
    };
    var removeClass = function (el, cls) {
        el.className = el.className
        .split(/\s+/)
        .filter(function (c) { return !!c && c != cls; })
        .join(' ');
    };
    var RModal = function RModal(el, opts) {
        var this$1 = this;
        this.opened = false;
        this.opts = {
            bodyClass: 'modal-open'
            , dialogClass: 'modal-dialog'
            , dialogOpenClass: 'bounceInDown'
            , dialogCloseClass: 'bounceOutUp'
            , focus: true
            , focusElements: [
                'a[href]', 'area[href]', 'input:not([disabled]):not([type=hidden])'
                , 'button:not([disabled])', 'select:not([disabled])'
                , 'textarea:not([disabled])', 'iframe', 'object', 'embed'
                , '*[tabindex]', '*[contenteditable]'
            ]
            , escapeClose: true
            , content: null
            , closeTimeout: 500
        };
        Object.keys(opts || {})
        .forEach(function (key) {
            /* istanbul ignore else */
            if (opts[key] !== undefined) {
                this$1.opts[key] = opts[key];
            }
        });
        this.overlay = el;
        this.dialog = el.querySelector(("." + (this.opts.dialogClass)));

        if (this.opts.content) {
            this.content(this.opts.content);
        }
    };
    RModal.prototype.open = function open (content) {
            var this$1 = this;
        this.content(content);
        if (!is(this.opts.beforeOpen, 'function')) {
            return this._doOpen();
        }
        this.opts.beforeOpen(function () {
            this$1._doOpen();
        });
    };
    RModal.prototype._doOpen = function _doOpen () {
        addClass(document.body, this.opts.bodyClass);
        removeClass(this.dialog, this.opts.dialogCloseClass);
        addClass(this.dialog, this.opts.dialogOpenClass);
        this.overlay.style.display = 'block';
        if (this.opts.focus) {
            this.focusOutElement = document.activeElement;
            this.focus();
        }
        if (is(this.opts.afterOpen, 'function')) {
            this.opts.afterOpen();
        }
        this.opened = true;
    };
    RModal.prototype.close = function close () {
            var this$1 = this;
        if (!is(this.opts.beforeClose, 'function')) {
            return this._doClose();
        }
        this.opts.beforeClose(function () {
            this$1._doClose();
        });
    };
    RModal.prototype._doClose = function _doClose () {
            var this$1 = this;
        removeClass(this.dialog, this.opts.dialogOpenClass);
        addClass(this.dialog, this.opts.dialogCloseClass);
        removeClass(document.body, this.opts.bodyClass);
        if (this.opts.focus) {
            this.focus(this.focusOutElement);
        }
        if (is(this.opts.afterClose, 'function')) {
            this.opts.afterClose();
        }
        this.opened = false;
        setTimeout(function () {
            this$1.overlay.style.display = 'none';
        }, this.opts.closeTimeout);
    };
    RModal.prototype.content = function content (html) {
        if (html === undefined) {
            return this.dialog.innerHTML;
        }
        this.dialog.innerHTML = html;
    };
    RModal.prototype.elements = function elements (selector, fallback) {
        fallback = fallback || window.navigator.appVersion.indexOf('MSIE 9.0') > -1;
        selector = is(selector, 'array') ? selector.join(',') : selector;
        return [].filter.call(
            this.dialog.querySelectorAll(selector)
            , function (element) {
                if (fallback) {
                    var style = window.getComputedStyle(element);
                    return style.display !== 'none' && style.visibility !== 'hidden';
                }
                return element.offsetParent !== null;
            }
        );
    };
    RModal.prototype.focus = function focus (el) {
        el = el || this.elements(this.opts.focusElements)[0] || this.dialog.firstChild;
        if (el && is(el.focus, 'function')) {
            el.focus();
        }
    };
    RModal.prototype.keydown = function keydown (ev) {
        if (this.opts.escapeClose && ev.which == 27) {
            this.close();
        }
        function stopEvent() {
            ev.preventDefault();
            ev.stopPropagation();
        }
        if (this.opened && ev.which == 9 && this.dialog.contains(ev.target)) {
            var elements = this.elements(this.opts.focusElements)
                , first = elements[0]
                , last = elements[elements.length - 1];
            if (first == last) {
                stopEvent();
            }
            else if (ev.target == first && ev.shiftKey) {
                stopEvent();
                last.focus();
            }
            else if (ev.target == last && !ev.shiftKey) {
                stopEvent();
                first.focus();
            }
        }
    };
    RModal.prototype.version = '1.0.24';
    RModal.version = '1.0.24';
    return RModal;
    })));
    // <<< rmodal.js <<<

    window.onload = function() {
      var modal = new RModal(document.getElementById('ra-le-modal'), {
        beforeOpen: function(next) {
          document.getElementById('ra-le-content').innerHTML = '<iframe src="#{rails_admin.edit_path( ra_le_model, ra_le_id )}" width="930px" height="470px"></iframe>';
          next();
        },
        afterOpen: function() {
        },
        beforeClose: function(next) {
          next();
        },
        afterClose: function() {
          window.location.reload( true );
        }
        // , bodyClass: 'modal-open'
        // , dialogClass: 'modal-dialog modal-dialog-lg'
        // , dialogOpenClass: 'animated fadeIn'
        // , dialogCloseClass: 'animated fadeOut'

        // , focus: true
        // , focusElements: ['input.form-control', 'textarea', 'button.btn-primary']

        // , escapeClose: true
      });
      document.addEventListener('keydown', function(ev) {
        modal.keydown(ev);
      }, false);
      document.getElementById('ra-le-open-modal').addEventListener("click", function(ev) {
        ev.preventDefault();
        modal.open();
      }, false);
      window.modal = modal;
    }
